# Basic options
#===========
# Color prompt for git
reset=$(tput sgr0)
boldgreen=$(tput setaf 2)$(tput bold)
cyan=$(tput sgr0)$(tput setaf 6)
boldred=$(tput setaf 1)$(tput bold)
boldwhite=$(tput setaf 7)$(tput bold)
boldyellow=$(tput setaf 3)$(tput bold)

PARENCLR=$'\001\e[0;36m\002'
BRANCHCLR=$'\001\e[1;33m\002'
alias branchname="git branch 2>/dev/null | sed -ne 's/^* \(.*\)/ ${PARENCLR}(${BRANCHCLR}\1${PARENCLR}\)/p'"
GIT_STATUS='$(branchname)'
PROMPT_CHAR="âš¡" #"\$"
PS1="\[$boldgreen\]\u\[$cyan\]@\[$boldred\]\h\[$cyan\]{\[$boldwhite\]\w\[$cyan\]}\[$reset\]$GIT_STATUS\[$reset\]$PROMPT_CHAR "
#=======================
#AWS tab-completion
complete -C aws_completer aws
HISTSIZE=-1
HISTFILESIZE=-1

export HISTCONTROL=ignoredups
export COLORFGBG='default;default'

function 256_export {
    export AWS_EXECUTION_ENV="APN/1.0 HashiCorp/1.0 Terraform/1.5.5 aws-sdk-go/1.44.256 (go1.20.7; linux; amd64)"
}

function 256_unexport {
    unset AWS_EXECUTION_ENV="APN/1.0 HashiCorp/1.0 Terraform/1.5.5 aws-sdk-go/1.44.256 (go1.20.7; linux; amd64)" 
}

alias pull_requests='xdg-open https://bitbucket.org/figg/$(basename $(pwd))/pull-requests/'
alias rando="cat /dev/urandom | tr -dc 'a-zA-Z0-9*!' | fold -w 18 | head -1"
alias pgadmin3='docker run --rm -v /tmp/.X11-unix:/tmp/.X11-unix --dns 10.100.0.2 -e DISPLAY=unix$DISPLAY -v $HOME:/home/mdouchement mdouchement/pgadmin3'
alias space='echo "sudo du -sh * | sort -hr | head -n10"'
alias grep='grep --color=auto'
alias gitlog="git log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'
alias dupes='fgrep -x -f' #Find contents of file1 that are also present in file2
alias undiff='fgrep -x -v -f' #Find the contents of file2 that are not present in file1
# ^^^ see https://www.technlg.net/linux/fgrep-files/ for more context ^^^
alias ssh='ssh -o IdentitiesOnly=true'

# function awssso-populate-profiles {
#   aws-sso-util configure populate -u https://gofigg.awsapps.com/start --sso-region us-east-1 --region us-east-1 -c output=json --no-credential-process
# }

function awssso-export {
  eval $(aws-export-credentials --env-export)
}

function awssso-unexport {
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
}

function knife_help {
  echo "#############################################################################"
  echo "cd /etc/cinc"
  echo "Cookbook upload:    knife cookbook upload edo-filetransfer"
  echo "Databag etl client: knife data bag from file etl_clients ~/figg/edo-chef/data_bags/etl_clients/jpmc.json"
  echo "Databag parameter:  knife data bag from file parameters ~/figg/edo-chef/data_bags/parameters/hornetq.json"
  echo "Environment file:   knife environment from file ~/figg/edo-chef/environments/uat.json"
  echo "#############################################################################"
}

function git_flatten {
  git reset $(git merge-base master `git branch | grep '*' | cut -d ' ' -f2`)
  git add -A
  echo "#############################################################################"
  echo "#  Write your new, singular commit message, and then force push to origin."
  echo "#  Like this:"
  echo "#  git commit -m 'COMPRESSED_MESSAGE'"
  echo "#  git push -u origin $(git branch | grep '*' | cut -d ' ' -f2) --force"
  echo "#############################################################################"
}

function git_tag {
  echo "Make sure you are on your working branch, and you've commited and pushed"
  echo "  Syntax: "
  echo 'git tag -a v1.2.3 -m "short desc here"'
  echo 'git push origin v1.2.3'
  echo 'git describe --abbrev=0'
}

function git_back {
  git checkout master 2> /dev/null || git checkout main || echo "no main or master branch!!"
  git pull
}

function git_fetch_master_changes_into_current_branch {
  git fetch origin
  git merge origin/master
}

function git_fetch_main_changes_into_current_branch {
  git fetch origin
  git merge origin/main
}

function git_fetch_qa_changes_into_current_branch {
  git fetch origin
  git merge origin/qa
}

function git_fix_merge_confilcts {
  echo "########################################"
  echo "  cd ~/<repo_directory>"
  echo "  git pull"
  echo "  git checkout <feature_branch>"
  echo "  git pull origin master"
  echo "  git mergetool"
  echo "  # make your edits to the files"
  echo "  git add <filename> the change file(s)"
  echo "  git commit -m 'fixing merge conflicts'"
  echo "  git push origin <feature_branch>"
  echo "########################################"
}

function purge_old_kernels_and_headers_safley {
  dpkg -l \
  | egrep "linux-(signed|modules|image|headers)" \
  | grep -v $(uname -r | cut -d - -f 1) \
  | awk {'print $2'} \
  | xargs sudo apt purge -y
}

#====================================================
function tempo_destroy_and_pull {
  rm -rf ~/tempo/
  mkdir ~/tempo
  cd ~/tempo/
  awssso-export
  ssm-parameter-store pull
  awssso-unexport
}
#====================================================
# enable color support of ls and also add handy aliases
if [ "$TERM" != "dumb" ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

# Source global definitions
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi

if [ -f ~/.bash_aliases ]; then
. ~/.bash_aliases
fi
#====================================
_ssm() {
  local cur
  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  WORDS="$(aws ec2 describe-instances \
  --filters Name=instance-state-code,Values=16 Name=tag:Environment,Values=ops,qa,uat,prd \
  | jq '.[][].Instances[] | "\(.Tags | map( { (.Key): .Value } ) | add | .Name),\(.InstanceId)"' \
  | tr -s ' ' | tr ' ' '_' | tr '[A-Z]' '[a-z]')"
  case "$cur" in
    *)
      COMPREPLY=($(compgen -W "$WORDS" -- "$cur"))
      ;;
  esac
}

function ssm() {
  echo $@
  target=$(echo $@ | awk -F ',' '{print $2}')
  aws ssm start-session --target $target
}

complete -F _ssm ssm
#====================================

awssso() {
  # requires:
  # - aws cli v2

  if [[ -z "$AWS_CONFIG_FILE" ]]
  then
    local AWS_CONFIG_FILE=~/.aws/config
  fi

  export AWS_PROFILE=${1}
  export AWS_REGION=$(cat ${AWS_CONFIG_FILE} | grep -A20 "$AWS_PROFILE" | grep sso_region | awk '{print $3}' | head -1)
  export AWS_ACCOUNT=$(cat ${AWS_CONFIG_FILE} | grep -A20 "$AWS_PROFILE" | grep sso_account_id | awk '{print $3}' | head -1)

  # Login only if there is no active sso session for the specified profile
  aws sts get-caller-identity >/dev/null 2>&1
  if [ ! $? -eq 0 ]; then
    aws sso login --profile ${AWS_PROFILE}
  fi
}

_awssso() {
  local cur
  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}

  if [[ -z "$AWS_CONFIG_FILE" ]]
  then
    local AWS_CONFIG_FILE=~/.aws/config
  fi
  
  WORDS="$(cat ${AWS_CONFIG_FILE} | grep "^\[profile " | sed 's/\[profile //;s/\]//')"
  case "$cur" in
  *)
    COMPREPLY=($(compgen -W "$WORDS" -- "$cur"))
    ;;
  esac
}

complete -F _awssso awssso

awssso-logout() {
  aws sso logout --profile ${AWS_PROFILE}
  unset AWS_PROFILE
  unset AWS_REGION
  unset AWS_ACCOUNT
}

function figg_clone() {
  cd ~/figg/
  git clone git@bitbucket.org:figg/$1.git
}

#========================================
git-log-search() {
  if [ -z "$1" ]; then
    echo "Usage: git-log-search 'your-search-string'"
    echo "-- Be sure to surround in single-quotes --"
    echo "Searches the full history of git, revealing code within commits that matches your string"
    return 1
  fi
  git log -S"$1" -p
}
